// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_URI")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userEmail         String     @unique
  userName          String?
  userImage         String?
  userCreatedAt     DateTime   @default(now())
  userUpdatedAt     DateTime   @updatedAt
  playlistLikedId   String[]   @db.ObjectId
  playlistLiked     Playlist[] @relation("likedBy", fields: [playlistLikedId], references: [id])
  tracksId          String[]   @db.ObjectId
  tracks            Track[]    @relation(fields: [tracksId], references: [id])
  postId            String[]   @db.ObjectId
  post              Post[]     @relation(fields: [postId], references: [id])
  albumId           String[]   @db.ObjectId
  album             Album[]    @relation(fields: [albumId], references: [id])
  playlistCreatedId String[]   @db.ObjectId
  playlistCreated   Playlist[] @relation("createdBy")
}

model Playlist {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  playlistName        String
  playlistImage       String?
  playlistCreatedAt   DateTime @default(now())
  playlistUpdatedAt   DateTime @updatedAt
  track               Track[]  @relation(fields: [trackId], references: [id])
  trackId             String[] @db.ObjectId
  playlistLikedBy     User[]   @relation("likedBy", fields: [playlistLikedById], references: [id])
  playlistLikedById   String[] @db.ObjectId
  playlistCreatedBy   User?    @relation("createdBy", fields: [playlistCreatedById], references: [id])
  playlistCreatedById String?  @db.ObjectId
  genre               Genre[]  @relation(fields: [genreId], references: [id])
  genreId             String[] @db.ObjectId
}

model Track {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  trackName      String
  trackUrl       String
  trackImage     String
  trackCreatedAt String?
  playlist       Playlist[]    @relation(fields: [playlistId], references: [id])
  playlistId     String[]      @db.ObjectId
  user           User[]        @relation(fields: [trackLikedBy], references: [id])
  trackLikedBy   String[]      @db.ObjectId
  album          Album[]       @relation(fields: [albumId], references: [id])
  albumId        String[]      @db.ObjectId
  artist         Artist[]      @relation(fields: [artistId], references: [id])
  artistId       String[]      @db.ObjectId
  genre          Genre[]       @relation(fields: [genreId], references: [id])
  genreId        String[]      @db.ObjectId
  post           Post[]
  counter        CounterTrack?
}

model Artist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  artistName  String
  artistImage String
  popularity  Int
  album       Album[]  @relation(fields: [albumId], references: [id])
  albumId     String[] @db.ObjectId
  genre       Genre[]  @relation(fields: [genreId], references: [id])
  genreId     String[] @db.ObjectId
  track       Track[]  @relation(fields: [trackId], references: [id])
  trackId     String[] @db.ObjectId
  post        Post[]
}

model Album {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  albumName      String
  albumImage     String
  albumCreatedAt String
  artist         Artist[] @relation(fields: [artistId], references: [id])
  artistId       String[] @db.ObjectId
  genre          Genre[]  @relation(fields: [genreId], references: [id])
  genreId        String[] @db.ObjectId
  track          Track[]  @relation(fields: [trackId], references: [id])
  trackId        String[] @db.ObjectId
  user           User[]   @relation(fields: [albumLikedBy], references: [id])
  albumLikedBy   String[] @db.ObjectId
  post           Post[]
}

model Genre {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  genreName  String
  genreImage String?
  artist     Artist[]   @relation(fields: [artistId], references: [id])
  artistId   String[]   @db.ObjectId
  album      Album[]    @relation(fields: [albumId], references: [id])
  albumId    String[]   @db.ObjectId
  playlist   Playlist[] @relation(fields: [playlistId], references: [id])
  playlistId String[]   @db.ObjectId
  track      Track[]    @relation(fields: [trackId], references: [id])
  trackId    String[]   @db.ObjectId
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User[]   @relation(fields: [userId], references: [id])
  userId   String[] @db.ObjectId
  track    Track?   @relation(fields: [trackId], references: [id])
  trackId  String?  @db.ObjectId
  artist   Artist?  @relation(fields: [artistId], references: [id])
  artistId String?  @db.ObjectId
  album    Album?   @relation(fields: [albumId], references: [id])
  albumId  String?  @db.ObjectId
}

model CounterTrack {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  track         Track  @relation(fields: [trackId], references: [id])
  trackId       String @unique @db.ObjectId
  countListened Int    @default(0)
}
